#include <stdlib.h>
#include <stdio.h>
#include "CQueueOperationsLL.c"
int main() {
	int op, x;
	while(1) {	
		printf("1.Enqueue 2.Dequeue 3.Display 4.Is empty 5.Size 6.Exit\n");
		printf("Enter your option : ");
		scanf("%d",&op);
		switch(op) {
			case 1: 
				printf("Enter element : ");
				scanf("%d",&x);
				enqueue(x);
				break;
			case 2: 
				dequeue();
				break;
			case 3: 
				display();
				break;
			case 4:
				isEmpty();
				break;
			case 5:
				size();
				break;
			case 6: exit(0);
		}
	}
}

part 02

struct Node{
    	rear = newNode;
    }
    rear->next = front;
    printf("Successfully inserted.\n");
}
void dequeue(){
	if(front == NULL){
		printf("Circular queue is underflow.\n");
		return;
	}
	Node* temp = front;
	int dequeuedItem = temp->data;
	if(front == rear){
		front=rear=NULL;
	}
	else{
		front=front->next;
		rear->next=front;
	}
	free(temp);
	printf("Deleted value = %d\n", dequeuedItem);
}
void display(){
	if(front == NULL){
		printf("Circular queue is empty.\n");
		return;
	}
	printf("Elements in the circular queue : ");
	Node* current = front;
	do{
		printf("%d ", current->data);
		current = current->next;
	}
	while(current != front);
	printf("\n");
}
int is_empty(){
	return front == NULL;
}
int size_queue(){
	if(front == NULL){
		return 0;
	}
	int count = 0;
	Node* current = front;
	do  {
		count++;
		current= current->next;
	}
	while(current != front);
	return count;
}
void isEmpty(){
	if(is_empty()){
		printf("Circular queue is empty.\n");
	}
	else{
		printf("Circular queue is not empty.\n");
	}
}
void size(){
	printf("Circular queue size : %d\n",size_queue());
}
